openapi: 3.0.3
info:
  title: Робот-пылесос
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v1
    description: Dev server
paths:
  /robots:
    get:
      tags:
        - Robots
      summary: Метод получения списка роботов
      description: описание метода 
      operationId: getAllRobots
      responses:
        '200':
          description: Успешный ответ со списком роботов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'          
        default:
          description: Всё остальное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Robot
      summary: Метод создания робота
      description: Add a new robot
      operationId: createRobot
      requestBody:
        description: Create a new Robot
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Robot'
      responses:
        '200':
          description: Успешный ответ создания робота
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
        default:
          description: Всё остальное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Robot
      summary: Метод удаления робота
      description: Delete robot
      operationId: deleteRobot
      responses:
        '200':
          description: Успешный ответ удаления робота
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
        default:
          description: Всё остальное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    get:
      tags:
        - Users
      summary: Метод получения списка пользователей
      description: Get list of Users
      operationId: getAllClients
      responses:
        '200':
          description: Успешный ответ со списком пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        default:
          description: Всё остальное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - User
      summary: Метод создания пользователя
      description: Creates of user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Успешный ответ создания пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        default:
          description: Всё остальное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
    delete:
      tags:
        - User
      summary: Метод удаления пользователя
      description: Delete user.
      operationId: deleteUser
      responses:
        '200':
          description: Успешный ответ удаления робота
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
        default:
          description: Всё остальное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
       
components:
  schemas:
    Robot:
      type: object
      required:
        - id
        - id_user
        - current_coords
        - id_robot_station
        - battary_state
        - id_schedule
        - type_of_service
        - id_log
      properties:
        id:
          type: integer
          format: int64
          example: 10
        id_user:
          type: integer
          format: int64
          example: 13
        current_coords:
          type: string
          example: 1, 2, 3, 4
        id_robot_station:
          type: integer
          format: int64
          example: 17
        battary_state:
          type: integer
          format: int64
          example: 21
        id_schedule:
          type: integer
          format: int64
          example: 8
        type_of_service:
          type: integer
          format: int64
          example: 19
        id_log:
          type: integer
          format: int64
          example: 33
    User:
      type: object
      required:
        - id
        - username
        - phone
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        phone:
          type: string
          example: '12345'
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    Users:
      description: List of user object
      type: array
      items:
        $ref: '#/components/schemas/User'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string

  